<?php

return [

    /*
    |--------------------------------------------------------------------------
    | 認証デフォルト
    |--------------------------------------------------------------------------
    |
    | このオプションは、アプリケーションのデフォルト認証「ガード」と
    | パスワードリセット「ブローカー」を定義します。必要に応じてこれらの
    | 値を変更できますが、ほとんどのアプリケーションにとって完璧なスタートです。
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | 認証ガード
    |--------------------------------------------------------------------------
    |
    | 次に、アプリケーションのすべての認証ガードを定義できます。
    | もちろん、セッションストレージとEloquentユーザープロバイダを
    | 利用する素晴らしいデフォルト設定が定義されています。
    |
    | すべての認証ガードにはユーザープロバイダーがあり、ユーザーが
    | データベースやアプリケーションで使用される他のストレージシステムから
    | 実際にどのように取得されるかを定義します。通常、Eloquentが使用されます。
    |
    | サポートされているドライバー: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | ユーザープロバイダー
    |--------------------------------------------------------------------------
    |
    | すべての認証ガードにはユーザープロバイダーがあり、ユーザーが
    | データベースやアプリケーションで使用される他のストレージシステムから
    | 実際にどのように取得されるかを定義します。通常、Eloquentが使用されます。
    |
    | 複数のユーザーテーブルまたはモデルがある場合は、モデル/テーブルを
    | 表す複数のプロバイダーを設定できます。これらのプロバイダーは、
    | 定義した追加の認証ガードに割り当てることができます。
    |
    | サポートされているドライバー: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | パスワードリセット
    |--------------------------------------------------------------------------
    |
    | これらの設定オプションは、Laravelのパスワードリセット機能の動作を指定します。これには、
    | トークンストレージに使用されるテーブルと、ユーザーを実際に取得するために呼び出される
    | ユーザープロバイダーが含まれます。
    |
    | 有効期限は、各リセットトークンが有効と見なされる分数です。
    | このセキュリティ機能により、トークンが短期間のみ有効であるため、推測される時間が
    | 短くなります。必要に応じてこれを変更できます。
    |
    | スロットリング設定は、ユーザーが新しいパスワードリセットトークンを生成する前に
    | 待機しなければならない秒数です。これにより、ユーザーが非常に大量の
    | パスワードリセットトークンをすばやく生成することを防ぎます。
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | パスワード確認タイムアウト
    |--------------------------------------------------------------------------
    |
    | ここでは、パスワード確認ウィンドウの有効期限が切れ、ユーザーが
    | 確認画面で再度パスワードを入力するように求められる前に
    | 経過する秒数を定義できます。デフォルトでは、タイムアウトは3時間続きます。
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];
